package final修饰符;
/**
 * @see
 * @author 崔秦
 * 
 * final修饰的成员变量系统不会为其隐式初始化
 * 
 * C#中的sealed关键字相似，都表示修饰的类、方法、变量不可改变
 * final表示的是：修饰的变量一旦获得初始值，就不能被改变
 * 可以修饰的是：成员变量(类变量和实例变量)、局部变量、形参
 * 初始化时间：在定义是赋值，也可以在初始化块和构造器中赋值	
 */

/**
 * 希望理解程序执行的顺序	--按照顺序来理解初始化的过程
 * 类变量：	静态初始化块|声明变量时		有且只有之一初始化
 * 实例变量：	非静态初始化块|声明|构造器	有且只有之一初始化
 * 对于实例变量：定义--> 普通初始化块 --> 构造器，不能在静态初始化块中初始化，因为静态不能访问非静态。
 * 类变量：	定义 --> 静态初始化块，不能在普通初始化块中初始化，因为类变量的初始化在静态初始化中结束初始化
 * 
 * 不要在初始化之前就访问final修饰的成员变量
 */
public class final成员变量 {
	//对于final修饰的成员变量，如果没有人为的初始化赋值，那么系统会为其分配，失去意义
	//！final修饰的成员变量必须由程序员显示地指定初始值
	//声明时
	final int a = 5;
	//利用时
	final int c;
	final String str;
	final static double d;
	//如果没有指定的默认值，没有初始化块和构造其中指定的初始值
	//final char ch;//不合法
	//普通初始化块
	{
		str = "cuiqin";
		//a = 3;//不合法
	}
	//静态初始化块，最先执行啊
	static
	{
		d = 5.5;
	}
	//构造器：针对实例变量
	public final成员变量()
	{
		//str = "xiaocui";//不合法
		c = 5;
	}
	public void changeFianl()
	{
		//d = 1.43;//普通方法
		//ch = 'a';
	}
	public static void main(String[] args)
	{
		final成员变量 s = new final成员变量();
		System.out.println(s.a+
				"\n"+
				s.c+
				"\n"+
				s.d+
				"\n"+
				s.str);
	}
	
}

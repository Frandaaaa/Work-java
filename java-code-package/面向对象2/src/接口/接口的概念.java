package 接口;
/**
 * @see		final修饰符.抽象类的作用 || 面向对象.包和import声明和import_static.包 || 面向对象.隐藏和封装.访问控制符||流程控制与数组.数组.foreach循环
 * 			|| 面对对象.方法详解.形参个数可变
 * @author 崔秦
 */
/**
 * 	从抽象类出发：从多个类中抽象出来的模板，--抽象的更加彻底的结果--->	接口
 * 	哈哈，接口里面不能包含普通方法，必须全部都是抽象方法
 * 	JAVA8以后接口中可以提供默认方法，而且默认方法都可以提供方法实现	
 */
/** 
 * 	类是一种具体实现体，接口是定义了某一批类所需要遵守的规范，只是规定这批类里必须提供的某些方法
 * 	接口是规范和实现分离的设计哲学??
 * 
 *	 面向接口耦合 -- 松耦合设计 -- 应该尽量降低各模块之间的耦合 
 * 	只要遵守接口规范，就可以使用
 * 
 * 	接口定义的是多个类共同的公共行为规范，行为是与外部交流的通道，也意味着接口里面通常是定义一组公用方法
 */
/**
 * 	令人奇妙的是，定义接口的方法都改变了不少
 * [修饰符] interface 接口名称 extends 父接口1,父接口2,...
 * {
 * 		常量
 * 		抽象方法
 * 		内部类、接口、枚举定义
 * 		默认方法或类方法
 * }
 *	 语法：	
 * 		修饰符可以使public或者省略，省略则采用包权限访问控制符，只有在相同包结构下面才可以访问该接口
 * 		接口名与类名应该相同的命名规范
 * 		接口只能继承接口不能继承类
 */ 
/**
 *	 接口可以包含成员变量(静态常量),方法(实例方法，类方法，默认方法)，内部类(内部接口、枚举)定义。
 * 	所有的玩意儿都是public访问权限，可以省略
 *	 静态常量而言，接口相关，系统会自动为这些成员变量增加static和final，总是使用这三个：public补充一下
 * 
 * 	由于没有初始化块，因而成员变量只能在定义时候制定默认值
 */
/**
 *	 一个.java中只能有一个接口，文件与源文件同名
 */
public interface 接口的概念 {
	//实际上是 public static final int MAX_SIZE
	//public：被公共调用，static：类成员没有构造器只能通过类直接访问，final：固定
	int MAX_CACHE_LINE = 5;
	//普通方法：总是用public abstract 修饰
	//普通方法不能有方法体，类方法，默认方法必须有方法体
	//如果不是普通方法，系统会自动增加abstract、public
	void out ();
	void getData(String msg);
	//默认方法:使用default修饰,不能使用static修饰，不能直接使用接口来调用默认方法，只能通过类的实例来调用
	default void print(String... msgs)//形参个数可变
	{
		for (String msg:msgs)//foreach 循环
		{
			System.out.println(msg);
		}
	}
	//默认方法:使用default修饰,不能使用static修饰，不能直接使用接口来调用默认方法，只能通过类的实例来调用
	default void test()
	{
		System.out.println("默认的test方法");
	}
	//类方法,必须使用static
	static String staticTest()
	{
		return "接口里面的类方法";
	}
}

